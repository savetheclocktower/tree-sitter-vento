====================
Variables
====================

<div>
  <h1>Hello world!</h1>
  {{ hello }}
  {{ messsage }}
  {{ expor }}
  {{ "<h1>Hello, world!</h1>" |> safe }}
  {{ if a }}
    {{ a }}
  {{ /if }}
</div>

---

(template
  (content)
  (tag (code))
  (tag (code))
  (tag (code))
  (tag (code) (filter (code)))
  (if_block
    (if_tag_start
      (code))
    (conditional_block (tag (code)))
    (if_tag_end))
(content))

====================
Comments
====================

<div>
  <h1>Hello world!</h1>
  {{# This is a comment #}}
  {{# a comment #}}
  {{# comment #}}

  <h1>Hello world!</h1>

  {{# life is pain comment #}}
  {{ This is not a comment }}
  {{# I'm a multi-line comment #}}
</div>

---

(template
  (content)
  (comment_tag (comment))
  (comment_tag (comment))
  (comment_tag (comment))
  (content)
  (comment_tag (comment))
  (tag (code))
  (comment_tag (comment))
  (content))


====================
Filters
====================

{{ test |> hello }}
{{ test |> hello |> world }}
{{ include "hello" |> worldFilter }}
{{ include "hello" { title: "Yes" }}}
{{ include "hello" { title: "Yes" } }}
{{ include "hello" { title: "Yes"} |> worldFilter }}
{{ include "hello" { title: "Yes" } |> worldFilter |> happy }}

---

(template
  (tag
    (code)
    (filter
      (code)))
  (tag
    (code)
    (filter
      (code)
      (code)))
  (include_tag
    (code)
    (filter
      (code)))
  (include_tag
    (code))
  (include_tag
    (code))
  (include_tag
    (code)
    (filter
      (code)))
  (include_tag
    (code)
    (filter
      (code)
      (code)))
  (content))


====================
Expressions
====================

{{ keyword skdjgskdgl }}
{{ solo }}
{{    b123.happy.hour()   }}
{{ if test }}
  {{ test |> hello }}
  {{ test |> hello |> world }}
  {{ test |> hello |> world |> happy }}
{{ /if }}

---

(template
  (tag (code))
  (tag (code))
  (tag (code))
  (if_block
    (if_tag_start
      (code)
    )
    (conditional_block
      (tag
        (code)
        (filter
          (code)))
      (tag
        (code)
        (filter
          (code)
          (code)))
      (tag
        (code)
        (filter
          (code)
          (code)
          (code)))
    )
    (if_tag_end)
  )
  (content))

====================
Expressions 2
====================

{{}}
{{ }}
{{> javascriptCode() }}
{{-> javascriptCode() }}
{{> javascriptCode() -}}
{{ JSON.parse({ hello: "world" }) }}

---

(template
  (tag)
  (tag)
  (javascript_tag (code))
  (javascript_tag (code))
  (javascript_tag (code))
  (tag (code))
  (content))

====================
Stress Keywords
====================

{{ code }}
{{ keyword() code }}
<h1>Hello!</h1>
{{ Deno }}
{{ Deno thing }}

---

(template
  (tag
    (code))
  (tag
    (code))
  (content)
  (tag
    (code))
  (tag
    (code))
  (content))

====================
Test parens
====================

<h1 style="color: rgba(color)">Hello!</h1>
{{ hello }}
{{ code().doStuff!() }}

---

(template
  (content)
  (tag
    (code))
  (tag
    (code))
  (content))

====================
For loops
====================

<ul>
  {{ for value of [1, 2, 3] }}
  <li>{{value}}</li>
  {{ /for }}
</ul>


<ul>
  {{ for key, value of [1, 2, 3] }}
  <li data-index="{{ key }}">{{value}}</li>
  {{ /for }}
</ul>

---

(template
  (content)
  (for_block
    (for_tag_start
      value: (identifier)
      (code))
    (content)
    (tag
      (code))
    (content)
    (for_tag_end))
  (content)
  (for_block
    (for_tag_start
      key: (identifier)
      value: (identifier)
      (code))
    (content)
    (tag
      (code))
    (content)
    (tag
      (code))
    (content)
    (for_tag_end))
  (content)
)
